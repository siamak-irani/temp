import React, { useState } from 'react'
import CollapseableCard from './CollapseableCard'
import { TbCube, TbMinus, TbPlus } from 'react-icons/tb'
import { Button, Flex } from 'antd'
import SelectItem from './SelectItem'
import PropTypes from 'prop-types'

const ItemListInput = ({ value, onChange, isOpenDefault = true }) => {
  const [items, setItems] = useState([])

  // Add a new empty row
  const handleAdd = () => {
    setItems(prev => [
      ...prev,
      { id: `${Date.now()}_${Math.random()}`, value: null }
    ])
  }

  // Remove row at index
  const handleRemove = index => {
    const updated = items.filter((_, i) => i !== index)
    setItems(updated)
    // Emit change after removal
    const selected = updated
      .filter(item => item.value != null)
      .map(item => item.value)
    onChange?.(selected)
  }

  // When a SelectItem changes
  const handleItemChange = (index, newValue) => {
    const updated = items.map((item, i) =>
      i === index ? { ...item, value: newValue } : item
    )
    setItems(updated)
    // Emit only non-null values
    const selected = updated
      .filter(item => item.value != null)
      .map(item => item.value)
    onChange?.(selected)
  }

  return (
    <CollapseableCard
      collapsible="icon"
      isOpenDefault={isOpenDefault}
      title={
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <Flex>
            <TbCube style={{ margin: '0 5px' }} />
            <div>کالا</div>
          </Flex>
          <Button
            type="dashed"
            style={{ width: 50 }}
            onClick={handleAdd}
            icon={<TbPlus />}
          />
        </div>
      }
    >
      <Flex direction="column" gap={10}>
        {items.map((item, index) => (
          <Flex key={item.id} gap={10} align="center">
            <Button
              type="text"
              icon={<TbMinus />}
              onClick={() => handleRemove(index)}
            />
            <SelectItem
              value={item.value}
              onChange={(val) => handleItemChange(index, val)}
              style={{ flex: 1 }}
            />
          </Flex>
        ))}
      </Flex>
    </CollapseableCard>
  )
}

ItemListInput.propTypes = {
  value: PropTypes.array,
  onChange: PropTypes.func.isRequired,
  isOpenDefault: PropTypes.bool,
}

export default ItemListInput

// -------------------------
// SelectItem.jsx

import { useEffect, useMemo, useState } from 'react'
import { Flex, Select, Space, theme } from 'antd'
import api from '../axios-proxy'
import PropTypes from 'prop-types'
import debounce from 'lodash.debounce'

const SelectItem = ({ value, onChange, addonBefore, onLoad, ...props }) => {
  const [data, setData] = useState([])
  const [isLoading, setIsLoading] = useState(false)
  const [query, setQuery] = useState('')
  const { token } = theme.useToken()

  const handleSearch = useMemo(
    () =>
      debounce((val) => {
        if (isNaN(val)) {
          setQuery(`&titleContains=${val}`)
        } else {
          setQuery(`&codeContains=${val}`)
        }
      }, 500),
    []
  )

  useEffect(() => {
    setIsLoading(true)
    api
      .get(`/api/items?isDeleted=false&includeStocks=true${query}`)
      .then((res) => setData(res.data.items))
      .finally(() => setIsLoading(false))
  }, [query])

  useEffect(() => {
    if (value != null) {
      const selectedItem = data.find(i => i.id === value)
      onLoad?.(value, selectedItem)
    }
  }, [value, data, onLoad])

  return (
    <Flex style={{ width: '100%' }}>
      <Space.Compact style={{ width: '100%' }}>
        {addonBefore && (
          <Flex
            align="center"
            style={{
              border: `1px solid ${token.colorBorder}`,
              background: token.colorBgElevated,
              borderRadius: '0 5px 5px 0',
              padding: '0 10px',
            }}
          >
            {addonBefore}
          </Flex>
        )}
        <Select
          value={value}
          placeholder="کالا ..."
          showSearch
          loading={isLoading}
          options={useMemo(
            () =>
              data.map(x => ({ value: x.id, label: x.title })),
            [data]
          )}
          onClick={e => e.stopPropagation()}
          onChange={(val) => onChange(val)}
          onSearch={handleSearch}
          {...props}
        />
      </Space.Compact>
    </Flex>
  )
}

SelectItem.propTypes = {
  value: PropTypes.number,
  onChange: PropTypes.func.isRequired,
  addonBefore: PropTypes.any,
  onLoad: PropTypes.func,
}

export default SelectItem
