برای این‌که در `Axios interceptor` فقط **یک بار** درخواست رفرش توکن ارسال بشه و بقیه‌ی درخواست‌هایی که همزمان با توکن منقضی‌شده ارسال می‌شن منتظر بمونن، باید یک مکانیزم صف (queue) و قفل (lock) پیاده‌سازی کنیم. در اینجا یک نمونه‌ی کامل از کدی که این کارو انجام می‌ده برات می‌نویسم:

```js
import axios from 'axios';

let isRefreshing = false;
let failedQueue = [];

const processQueue = (error, token = null) => {
  failedQueue.forEach(prom => {
    if (error) {
      prom.reject(error);
    } else {
      prom.resolve(token);
    }
  });
  failedQueue = [];
};

const api = axios.create({
  baseURL: 'https://your-api.com',
});

// اضافه کردن اینترسپتور برای پاسخ‌ها
api.interceptors.response.use(
  response => response,
  async error => {
    const originalRequest = error.config;

    // اگر پاسخ 401 بود و ما هنوز تلاش نکردیم که توکن رو رفرش کنیم
    if (
      error.response?.status === 401 &&
      !originalRequest._retry
    ) {
      originalRequest._retry = true;

      if (isRefreshing) {
        // اگر یک رفرش در حال انجامه، درخواست رو تو صف بذار
        return new Promise(function (resolve, reject) {
          failedQueue.push({ resolve, reject });
        })
          .then(token => {
            originalRequest.headers['Authorization'] = 'Bearer ' + token;
            return api(originalRequest);
          })
          .catch(err => {
            return Promise.reject(err);
          });
      }

      isRefreshing = true;

      return new Promise(async (resolve, reject) => {
        try {
          const refreshToken = localStorage.getItem('refreshToken');
          const res = await axios.post('/auth/refresh', { refresh_token: refreshToken });

          const newAccessToken = res.data.access_token;
          localStorage.setItem('accessToken', newAccessToken);

          api.defaults.headers.common['Authorization'] = 'Bearer ' + newAccessToken;
          originalRequest.headers['Authorization'] = 'Bearer ' + newAccessToken;

          processQueue(null, newAccessToken);
          resolve(api(originalRequest));
        } catch (err) {
          processQueue(err, null);
          reject(err);
        } finally {
          isRefreshing = false;
        }
      });
    }

    return Promise.reject(error);
  }
);

// اضافه کردن اینترسپتور برای درخواست‌ها تا همیشه توکن رو ست کنه
api.interceptors.request.use(config => {
  const token = localStorage.getItem('accessToken');
  if (token) {
    config.headers['Authorization'] = 'Bearer ' + token;
  }
  return config;
});

export default api;
```

### توضیح کلیدی:

* **isRefreshing**: نشون می‌ده آیا در حال حاضر یک درخواست رفرش توکن در حال اجرا هست یا نه.
* **failedQueue**: صفی از درخواست‌هایی که باید منتظر بمونن تا توکن جدید دریافت بشه.
* زمانی که رفرش موفق انجام شد، همه درخواست‌های صف با توکن جدید ارسال می‌شن.

آیا دوست داری نسخه‌ی TypeScript این کد رو هم داشته باشی؟
