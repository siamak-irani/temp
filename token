کد شما برای نوشتن و خواندن از IndexedDB به‌طور کلی خوب نوشته شده، اما می‌تونیم چند مورد برای بهبود کارایی، خوانایی، و کنترل خطاها انجام بدیم. در ادامه چند پیشنهاد برای بهبود کد:

---

### ✅ بهبودها:

---

#### 1. **مدیریت بهتر `db` و زمان‌بندی**

مشکل رایج در استفاده از IndexedDB، اینه که `request.onsuccess` ممکنه بعد از تلاش برای استفاده از `db` فراخوانی بشه. پس باید مطمئن بشیم که `db` آماده‌ست.

✅ **راه‌حل**: استفاده از Promise برای اطمینان از آمادگی `db` قبل از هر عملیات.

```js
let dbPromise = new Promise((resolve, reject) => {
    const request = indexedDB.open('store', 1)

    request.onupgradeneeded = function (event) {
        const db = event.target.result
        if (!db.objectStoreNames.contains('app')) {
            db.createObjectStore('app', { keyPath: 'key' })
        }
    }

    request.onsuccess = function () {
        resolve(request.result)
    }

    request.onerror = function (event) {
        reject(event.target.error)
    }
})
```

---

#### 2. **تابع مستقل برای گرفتن transaction**

برای جلوگیری از تکرار، می‌تونیم تابعی برای گرفتن transaction بنویسیم:

```js
const getStore = async (storeName, mode = 'readonly') => {
    const db = await dbPromise
    const tx = db.transaction(storeName, mode)
    return tx.objectStore(storeName)
}
```

---

#### 3. **بازنویسی `writeToIndexDB` و `readFromIndexDB`**

```js
export const writeToIndexDB = async ({ value, objectStore }) => {
    try {
        const store = await getStore(objectStore, 'readwrite')
        return new Promise((resolve, reject) => {
            const request = store.put({ key: 0, ...value })
            request.onsuccess = () => resolve({ ...value })
            request.onerror = (e) => reject(e)
        })
    } catch (e) {
        console.error('Write error:', e)
        throw e
    }
}

export const readFromIndexDB = async ({ objectStore }) => {
    try {
        const store = await getStore(objectStore)
        return new Promise((resolve, reject) => {
            const request = store.get(0)
            request.onsuccess = () => {
                if (request.result) resolve(request.result)
                else reject(new Error('No data found'))
            }
            request.onerror = () => reject(new Error('Read failed'))
        })
    } catch (e) {
        console.error('Read error:', e)
        throw e
    }
}
```

---

### ✅ مزایای این تغییرات:

* اطمینان از اتصال موفق به IndexedDB قبل از استفاده
* حذف `setTimeout` غیرضروری
* خوانایی و قابلیت استفاده مجدد بالاتر
* مدیریت بهتر خطاها با پیام‌های مشخص

---

اگر دوست داری، می‌تونم یه نسخه TypeScript هم برات بنویسم.
