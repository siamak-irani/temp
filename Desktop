import { useCallback, useEffect, useMemo, useState } from 'react'
import { Responsive, WidthProvider } from 'react-grid-layout'
import AppLayout from '../AppLayout'
import CartableWidget from './CartableWidget'
import MessengerWidget from './MessengerWidget'
import CalendarWidget from './CalendarWidget'
import NotepadWidget from './NotepadWidget'
import KanbanWidget from './KanbanWidget'
import FormRendrerWidget from '../../components/FormRenderer'
import FormBuilder from '../../components/FormBuilder'

const Desktop = () => {
    const ResponsiveGridLayout = useMemo(() => WidthProvider(Responsive), [])

    const [layouts, setLayouts] = useState()

    const widgetComponents = {
        kanbanWidget: <KanbanWidget key="kanbanWidget" />,
        notepadWidget: <NotepadWidget key="notepadWidget" />,
        messengerWidget: <MessengerWidget key="messengerWidget" />,
        cartableWidget: <CartableWidget key="cartableWidget" />,
        // calendarWidget: <CalendarWidget key="calendarWidget" />,
    }

    const [widgetsList, setWidgetsList] = useState([
        {
            key: 1,
            title: 'kanbanWidget',
            label: 'کنبان',
            isSelected: false,
        },
        {
            key: 2,
            title: 'notepadWidget',
            label: 'یادداشت',
            isSelected: false,
        },
        // {
        //     key: 3,
        //     title: 'messengerWidget',
        //     label: 'پیام‌رسان',
        //     isSelected: false,
        // },
        {
            key: 4,
            title: 'cartableWidget',
            label: 'کارتابل',
        },
        {
            key: 5,
            title: 'calendarWidget',
            label: 'تقویم',
        },
    ])

    const [isFirstRender, setIsFirstRender] = useState(true)

    const getFromLocalStorage = useCallback((key) => {
        let ls = {}
        ls = JSON.parse(localStorage.getItem('desktop-grid-layout')) || {}
        return ls[key]
    }, [])

    const saveToLocalStorage = useCallback((key, value) => {
        const desktopGridLayou =
            JSON.parse(localStorage.getItem('desktop-grid-layout')) || {}
        localStorage.setItem(
            'desktop-grid-layout',
            JSON.stringify({
                ...desktopGridLayou,
                [key]: value,
            })
        )
    }, [])

    useEffect(() => {
        setIsFirstRender(false)
        const allLayouts = getFromLocalStorage('allLayouts')
        const widgetsList = getFromLocalStorage('widgetsList')
        if (!allLayouts)
            saveToLocalStorage('allLayouts', {
                lg: [
                    { i: 'cartableWidget', x: 0, y: 1, w: 1, h: 1 },
                    { i: 'calendarWidget', x: 2, y: 1, w: 1, h: 1 },
                    // { i: 'messengerWidget', x: 0, y: 0, w: 3, h: 3 },
                    { i: 'notepadWidget', x: 0, y: 1, w: 1, h: 1 },
                    { i: 'kanbanWidget', x: 0, y: 1, w: 1, h: 1 },
                ],
            })

        if (!widgetsList)
            saveToLocalStorage('widgetsList', [
                {
                    key: 1,
                    title: 'kanbanWidget',
                    label: 'کنبان',
                    isSelected: false,
                },
                {
                    key: 2,
                    title: 'notepadWidget',
                    label: 'یادداشت',
                    isSelected: false,
                },
                // {
                //     key: 3,
                //     title: 'messengerWidget',
                //     label: 'پیام‌رسان',
                //     isSelected: false,
                // },
                {
                    key: 4,
                    title: 'cartableWidget',
                    label: 'کارپوشه',
                    isSelected: false,
                },
                {
                    key: 5,
                    title: 'calendarWidget',
                    label: 'تقویم',
                    isSelected: false,
                },
            ])

        setLayouts(allLayouts)
        setWidgetsList(widgetsList)
    }, [isFirstRender, saveToLocalStorage, getFromLocalStorage])

    const onLayoutChange = (layout, allLayouts) => {
        if (!isFirstRender) {
            saveToLocalStorage('allLayouts', allLayouts)
            setLayouts(allLayouts)
        }
    }

    return (
        <AppLayout padding="10px">
            <ResponsiveGridLayout
                useCSSTransforms={false}
                layouts={layouts}
                className="layout"
                compactType="vertical"
                draggableHandle=".WidgetDraggableHandle"
                style={{ direction: 'ltr' }}
                cols={{ lg: 4, md: 2, sm: 1, xs: 1, xxs: 1 }}
                breakpoints={{ lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 }}
                onLayoutChange={onLayoutChange}
            >
                {widgetsList?.map((widget) =>
                    widget?.isSelected ? widgetComponents[widget?.title] : null
                )}
            </ResponsiveGridLayout>
            <FormRendrerWidget
                schema={[
                    {
                        id: 'input-money-634a38b1782',
                        type: 'input',
                        name: 'input-4a634a38b17',
                        required: false,
                        label: 'اینپوت',
                        'select-input-type': 'money',
                        subType: 'money',
                    },
                    {
                        id: 'select-money-38b1782c3b8',
                        type: 'select',
                        name: 'input-money-634a38b1782',
                        required: false,
                        label: 'انتخاب',
                        'options': [
                            {
                                value: 'checked',
                                label: 'dsaf',
                            },
                            {
                                value: 'checked',
                                label: 'asdfasd',
                            },
                            {
                                value: 'checked',
                                label: 'fsdf',
                            },
                        ],
                        subType: 'money',
                    },
                    {
                        id: 'date-money-782c3b8973e',
                        type: 'date',
                        name: 'select-money-38b1782c3b8',
                        required: false,
                        label: 'تاریخ',
                        subType: 'money',
                    },
                    {
                        id: 'checkbox-money-3b8973e1def',
                        type: 'checkbox-group',
                        name: 'date-money-782c3b8973e',
                        required: false,
                        label: 'چک باکس ',
                        options: [
                            {
                                value: false,
                                label: 'sdfadf',
                            },
                            {
                                value: 'checked',
                                label: 'sdfaf',
                            },
                        ],
                        subType: 'money',
                    },
                ]}
            />
            <FormBuilder />
        </AppLayout>
    )
}

export default Desktop
