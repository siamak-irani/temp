import api from '../axios-proxy'
import debounce from 'lodash.debounce'
import { useMemo } from 'react'

const useBusinessRecordValidator = (businessRecordResource, errorMessage = '') => {
    const businessRecordValidator = useMemo(() => 
        debounce(async ({ value, inputName, defaultValue }, callback) => {
            try {
                switch (inputName) {
                    case 'phoneNumber': {
                        if (defaultValue?.find((item) => item.phoneNumber === value)) {
                            return callback(Promise.resolve(value))
                        }
                        if (
                            value.match(/^(0[1-8]{2})(\d{8})$/g) === null &&
                            value.match(/^09([0-9]{2})[0-9]{3}[0-9]{4}$/g) === null
                        ) {
                            return callback(Promise.reject('شماره تماس وارد شده معتبر نیست'))
                        }

                        const response = await api.get(
                            `/api/${businessRecordResource}?phoneNumberContains=${value}`
                        )
                        return callback(
                            response?.data?.items.length === 0
                                ? Promise.resolve(value)
                                : Promise.reject('شماره وارد شده تکراری است')
                        )
                    }
                    case 'fullName': {
                        const leadTitle =
                            value.person.firstName + ' ' + value?.person?.lastName
                        if (defaultValue?.fullName === leadTitle) {
                            return callback(Promise.resolve(value))
                        }
                        if (
                            value.person.firstName?.trim() !== '' &&
                            value.person.lastName?.trim() !== ''
                        ) {
                            const response = await api.get(
                                `/api/${businessRecordResource}?titleContains=${leadTitle}`
                            )
                            return callback(
                                response.data.items.length === 0
                                    ? Promise.resolve(value)
                                    : Promise.reject('شخص وارد شده تکراری است')
                            )
                        }
                        break
                    }
                    case 'company-name': {
                        if (defaultValue?.name === value) {
                            return callback(Promise.resolve(value))
                        }
                        if (value.trim() !== '') {
                            const response = await api.get(
                                `/api/${businessRecordResource}?titleContains=${value}`
                            )
                            return callback(
                                response?.data?.items?.length === 0
                                    ? Promise.resolve(value)
                                    : Promise.reject('شرکت وارد شده تکراری است')
                            )
                        }
                    }
                }
            } catch {
                return callback(Promise.reject(errorMessage))
            }
        }, 500), // زمان دیبانس 500 میلی‌ثانیه
        [businessRecordResource, errorMessage] // وابستگی‌ها
    )

    return ({ value, inputName, defaultValue }) =>
        new Promise((resolve, reject) =>
            businessRecordValidator({ value, inputName, defaultValue }, (result) => {
                result.then(resolve).catch(reject)
            })
        )
}

export default useBusinessRecordValidator
