function waitForCondition(conditionFn, interval = 100) {
  return new Promise(resolve => {
    const check = () => {
      if (conditionFn()) {
        resolve();
      } else {
        setTimeout(check, interval);
      }
    };
    check();
  });
}

let ready = false;

// شبیه‌سازی یک رویداد غیرهم‌زمان که بعد از ۳ ثانیه شرط را برقرار می‌کند
setTimeout(() => {
  ready = true;
}, 3000);

async function main() {
  console.log("در حال انتظار برای آماده شدن...");
  await waitForCondition(() => ready);
  console.log("ادامه اجرای کد بعد از برقرار شدن شرط");
}

main();

function waitForLocalStorageChange(keyToWatch) {
  return new Promise(resolve => {
    function handler(event) {
      if (event.key === keyToWatch) {
        window.removeEventListener("storage", handler);
        resolve(event.newValue); // یا هر کاری که خواستی انجام بده
      }
    }
    window.addEventListener("storage", handler);
  });
}

async function main() {
  console.log("در حال انتظار برای تغییر در localStorage...");
  const newValue = await waitForLocalStorageChange("my-key");
  console.log("مقدار جدید:", newValue);
}

main();


localStorage.setItem("my-key", "hello world");


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




// کلیدهای مورد استفاده توی localStorage
const TOKEN_KEY = "jwt-token";
const REFRESH_FLAG_KEY = "refresh-in-progress";

// تابع کمکی: منتظر تغییر توکنی با کلید key بمون
function waitForLocalStorageChange(key) {
  return new Promise(resolve => {
    function handler(event) {
      if (event.key === key) {
        window.removeEventListener("storage", handler);
        resolve(event.newValue);
      }
    }
    window.addEventListener("storage", handler);
  });
}

// تابع اصلی: اگر توکن منقضی شده بود، رفرش می‌کنه
async function getValidToken() {
  let token = localStorage.getItem(TOKEN_KEY);
  if (token && !isTokenExpired(token)) {
    // هنوز معتبره
    return token;
  }
  
  // اگر تب دیگه‌ای داره رفرش می‌کنه:
  if (localStorage.getItem(REFRESH_FLAG_KEY)) {
    // منتظر بمون تا تب اول توکن رو بنویسه
    const newToken = await waitForLocalStorageChange(TOKEN_KEY);
    return newToken;
  }
  
  // این تب رفرش می‌کنه:
  try {
    // علامت می‌زنه که رفرش در حال انجامه
    localStorage.setItem(REFRESH_FLAG_KEY, Date.now().toString());
    
    // فراخوانی API برای گرفتن توکن جدید
    const response = await fetch("/auth/refresh-token", {
      method: "POST",
      credentials: "include",
    });
    if (!response.ok) throw new Error("Refresh failed");
    const { token: freshToken } = await response.json();

    // توکن جدید رو ذخیره می‌کنه
    localStorage.setItem(TOKEN_KEY, freshToken);
    return freshToken;
    
  } finally {
    // در هر صورت، پرچم رفرش رو حذف می‌کنیم
    localStorage.removeItem(REFRESH_FLAG_KEY);
  }
}

// مثال تابع کمکی برای چک expiration (JWT شناسنامه‌ش رو پارس و exp رو بررسی می‌کنه)
function isTokenExpired(token) {
  try {
    const payload = JSON.parse(atob(token.split(".")[1]));
    // exp به ثانیه از epoch
    return payload.exp * 1000 < Date.now();
  } catch {
    return true;
  }
}

// استفاده در هر جایی که می‌خوای request بزنی
async function fetchWithAuth(url, options = {}) {
  const token = await getValidToken();
  return fetch(url, {
    ...options,
    headers: {
      ...options.headers,
      Authorization: `Bearer ${token}`,
    }
  });
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


let refreshingPromise = null;

async function getValidToken() {
  const token = getToken();
  if (!isExpired(token)) return token;

  // اگر در حال حاضر رفرش در جریانه، صبر کن
  if (refreshingPromise) return refreshingPromise;

  // شروع رفرش
  refreshingPromise = refreshToken().then(newToken => {
    setToken(newToken);
    refreshingPromise = null;
    return newToken;
  }).catch(err => {
    refreshingPromise = null;
    throw err;
  });

  return refreshingPromise;
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


const channel = new BroadcastChannel("auth");

channel.onmessage = (e) => {
  if (e.data.type === "token-updated") {
    localStorage.setItem("jwt-token", e.data.token);
  }
};

// تب اول:
channel.postMessage({ type: "token-updated", token: newToken });

