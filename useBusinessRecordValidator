import api from '../axios-proxy'
import debounce from 'lodash.debounce'

const useBusinessRecordValidator = (businessRecordResource, errorMessage = '') => {
    const sendDebouncedRequest = debounce(async (url, resolve, reject) => {
        try {
            const response = await api.get(url)
            if (response?.data?.items?.length === 0) {
                resolve(true)
            } else {
                reject('مقدار وارد شده تکراری است')
            }
        } catch {
            reject(errorMessage)
        }
    }, 500) // مقدار 500 به‌عنوان زمان دیبانس (500 میلی‌ثانیه)

    const businessRecordValidator = async ({ value, inputName, defaultValue }) => {
        switch (inputName) {
            case 'phoneNumber': {
                if (defaultValue?.find((item) => item.phoneNumber === value)) {
                    return Promise.resolve(value)
                }
                if (
                    value.match(/^(0[1-8]{2})(\d{8})$/g) === null &&
                    value.match(/^09([0-9]{2})[0-9]{3}[0-9]{4}$/g) === null
                ) {
                    return Promise.reject('شماره تماس وارد شده معتبر نیست')
                }

                return new Promise((resolve, reject) => {
                    const url = `/api/${businessRecordResource}?phoneNumberContains=${value}`
                    sendDebouncedRequest(url, () => resolve(value), reject)
                })
            }
            case 'fullName': {
                const leadTitle =
                    value.person.firstName + ' ' + value?.person?.lastName
                if (defaultValue?.fullName === leadTitle) {
                    return Promise.resolve(value)
                }
                if (
                    value.person.firstName?.trim() !== '' &&
                    value.person.lastName?.trim() !== ''
                ) {
                    return new Promise((resolve, reject) => {
                        const url = `/api/${businessRecordResource}?titleContains=${leadTitle}`
                        sendDebouncedRequest(url, () => resolve(value), reject)
                    })
                }
                break
            }
            case 'company-name': {
                if (defaultValue?.name === value) {
                    return Promise.resolve(value)
                }
                if (value.trim() !== '') {
                    return new Promise((resolve, reject) => {
                        const url = `/api/${businessRecordResource}?titleContains=${value}`
                        sendDebouncedRequest(url, () => resolve(value), reject)
                    })
                }
            }
        }
    }

    return businessRecordValidator
}

export default useBusinessRecordValidator
