import {
    closestCorners,
    DndContext,
    DragOverlay,
    KeyboardSensor,
    PointerSensor,
    useSensor,
    useSensors,
} from '@dnd-kit/core'
import { arrayMove, sortableKeyboardCoordinates } from '@dnd-kit/sortable'
import { useCallback, useContext, useEffect, useState } from 'react'
import { SortableContext, rectSortingStrategy } from '@dnd-kit/sortable'
import { useDroppable } from '@dnd-kit/core'
import { CSS } from '@dnd-kit/utilities'
import { useSortable } from '@dnd-kit/sortable'
import PropTypes from 'prop-types'
import { KanbanContext } from './NewKanban'
import { theme } from 'antd'
import InfiniteScroll from 'react-infinite-scroll-component'
import { uid } from 'uid'

export const Column = ({ id, title, fetchCards, c, cards }) => {
    const [pageState, setPageState] = useState(1)
    const {
        token: { colorBgLayout },
    } = theme.useToken()

    const { state, setState, activeId } = useContext(KanbanContext)

    const [pagginationData, setPagginationData] = useState({
        page: 1,
        size: null,
        total: null,
    })

    const getCards = useCallback(async () => {
        const { total, size, page, items } = await fetchCards(id, pageState)
        setPagginationData({ total, size, page })
        setState((prev) => {
            const newState = [...prev]
            const currentColumn = newState.find((item) => item.id === id)
            currentColumn.cards = [
                ...(currentColumn.cards || []),
                ...(items || []),
            ]
            return newState
        })
    }, [])

    useEffect(() => {
        getCards()
    }, [])

    const { setNodeRef } = useDroppable({ id })

    useEffect(() => {
        // console.log(currentColumn.cards)
        // console.log(state.find((item) => item.id === id))
        // console.log(id)
    }, [state])

    useEffect(() => {
        // console.log(state)
        // console.log(pageState)
    }, [state])

    return (
        <div>
            <SortableContext
                id={id}
                items={cards || []}
                strategy={rectSortingStrategy}
            >
                <div
                    id={`div-${id}`}
                    ref={setNodeRef}
                    style={{
                        width: '200px',
                        background: colorBgLayout,
                        marginRight: '10px',
                        height: '400px',
                        overflowY: 'auto',
                        overflowX: 'hidden',
                        height: '300px',
                    }}
                >
                    <div
                        style={{
                            background: 'white',
                            border: '1px solid black',
                            fontSize: '12px',
                        }}
                    >
                        {title}
                    </div>
                    <InfiniteScroll
                        dataLength={100}
                        scrollableTarget={`div-${id}`}
                        hasMore={true}
                        next={() => {
                            getCards(id, pageState + 1)
                            setPageState((prev) => prev + 1)
                            console.log("fetching ...")
                        }}

                        // style={{ overflowY: 'auto', overflowX: 'hidden' }}
                    >
                        {cards ? (
                            cards.map((card) => (
                                <Card
                                    key={uid()}
                                    id={card.id}
                                    title={card.title}
                                />
                            ))
                        ) : (
                            <div>آیتمی وجود ندارد</div>
                        )}
                    </InfiniteScroll>
                </div>
            </SortableContext>
            {/* <DragOverlay>{activeId ? <div>hello</div> : null}</DragOverlay> */}
        </div>
    )
}

Column.propTypes = {
    id: PropTypes.string,
    title: PropTypes.string,
    cards: PropTypes.array,
}

export const Card = ({ id, title }) => {
    const { attributes, listeners, setNodeRef, transform } = useSortable({
        id,
    })

    const style = {
        margin: '10px',
        opacity: 1,
        color: '#333',
        background: 'white',
        padding: '10px',
        transition: 'transform .4s',
        transform: CSS.Transform.toString(transform),
    }

    const { CardComponent } = useContext(KanbanContext)

    return (
        <div ref={setNodeRef} {...attributes} {...listeners} style={style}>
            <CardComponent />
            {id}
        </div>
    )
}

Card.propTypes = {
    id: PropTypes.string,
    title: PropTypes.string,
}
